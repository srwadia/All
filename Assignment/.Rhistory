library(readr)
X001 <- read_csv("~/Desktop/specdata/001.csv")
View(X001)
x = data.frame(X001)
x[1,1]
getwd()
getwd()
setwd("~/Desktop/specdata")
getwd()
# X001 <- read_csv("~/Desktop/specdata/001.csv")
x
# X001 <- read_csv("~/Desktop/specdata/001.csv")
y = read_csv("~/Desktop/specdata/002.csv")
z = x+y
z=rbind(x,y)
s = read_csv("~/Desktop/specdata/003.csv")
z = rbind(x,y,z)
x = 0
y = 0
s = 0
z = 0
X001 = 0
stop
getwd()
mydir = "specdata"
myfiles = list.files(path=mydir, pattern="*.csv", full.names=TRUE)
myfiles
myfiles = list.files(path=mydir, pattern=".csv", full.names=TRUE)
myfiles
mydir
getwd()
setwd("~/Desktop")
myfiles = list.files(path=mydir, pattern="*.csv", full.names=TRUE)
myfiles
dat_csv = ldply(myfiles, read_csv)
library(plyr)
library(readr)
install.packages(plyr)
install.packages("plyr")
library(plyr)
library(readr)
dat_csv = ldply(myfiles, read_csv)
library(datasets)
data(iris)
?iris
iris$Species
species = factor(c("setosa","versicolor","virginica"))
split(iris,factor)
split(iris$Sepal.Length, factor)
factor = gl(species, 50)
s = split(iris, iris$Species)
lapply(s, function(x) colMeans(x[,"Sepal.Length"]))
lappy(s, mean)
lapply(s, mean)
lapply(s, function(x) colMeans(x[,c("Sepal.Length","Sepal.Width")]))
apply(iris, 2, mean)
apply(iris[,1:4],2,mean)
library(datasets)
data(mtcars)
?mtcars
s = split(mtcars, cyl)
s = split(mtcars, mtcars$cyl)
lapply(s, function(x) colMeans(x[,c("mpg","disp")]))
lapply(mtcars, mean)
sapply(mtcars, cyl, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
apply(mtcars, 2, mean)
mean(mtcars$mpg, mtcars$cyl)
with(mtcars, tapply(mpg, cyl, mean))
(mtcars, tapply(mpg, cyl, mean))
mtcars, tapply(mpg, cyl, mean)
sapply(split(mtcars$mpg, mtcars$cyl),mean)
s = split(mtcars, mtcars$cyl)
lapply(s, function(x) colMeans(x[,c("mpg","disp","hp")]))
x = lapply(s, function(x) colMeans(x[,c("mpg","hp")]))
x
x[1]
x[1,2]
x[1][2]
y = x[1]
y[2]
y[1]
y$hp
y$mpg
x = lapply(s, function(x) colMeans(x[,4]))
x = lapply(s, function(x) mean(x[,4]))
x
x$8
x
x[3]
x[3]-x[1]
x[1]
type(x[1])
class(x[1])
is.numeric(x[1])
for(i in 1:length(x)){
x[i] = integer(x[i])
}
length(x)
for(i in 1:3){
x[i] = integer(x[i])
}
"2"
y = "3"
integer(y)
numeric(y)
y = numeric(y)
y
y = "2"
as.numeric(y)
for(i in 1:3){
x[i] = as.numeric(x[i])
}
x
x[3] - x[1]
x[3]
class(x[3])
as.numeric(x[3])
y = as.numeric(x[3])
z = as.numeric(x[1])
y-z
