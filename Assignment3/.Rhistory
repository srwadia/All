newdata <- mtcars[order(mpg),]
newdata
View(rel_df)
rel_df = select_df("NM")
rel_df_HA = rel_df[order(X11),]
rel_df_HA = rel_df[order(as.vector(X11)),]
rel_df = select_df("NM")
HA = rel_df$X11
HA = as.numeric(HA)
HA = as.vector(HA)
rel_df_HA = rel_df[order(HA),]
rel_df_HA
view(rel_df_HA)
View(rel_df_HA)
HA = na.omit(HA)
HA
rel_df_HA = rel_df[order(HA),]
rel_df_HA$X2[1]
View(rel_df_HA)
rel_df_HA$X2[2]
rel_df = select_df("NM")
HA = rel_df$X11
HA = as.numeric(HA)
HA = as.vector(HA)
HA = na.omit(HA)
HA
rel_df_HA = rel_df[order(HA),]
View(rel_df_HA)
HA
HA = sort(HA)
HA
rel_df = select_df("NM")
HA = rel_df$X11
HA = as.numeric(HA)
HA = as.vector(HA)
HA = na.omit(HA)
HA = sort(HA)
rel_df_HA = rel_df[order(HA),]
View(rel_df_HA)
HA = rel_df$X11
HA
HA = as.numeric(HA)
HA
HA = as.vector(HA)
HA
HA = na.omit(HA)
HA
HA[3]
HA = sort(HA)
HA
HASORT = rel_df[order(HA),]
View(HASORT)
HA
rel_df = select_df("NM")
HA = rel_df$X11
HA = as.numeric(HA)
HA = as.vector(HA)
HA = na.omit(HA)
rel_df_HA = rel_df[order(HA),]
View(rel_df_HA)
rel_df = as.numeric(rel_df)
rel_df = select_df("NM")
HA = rel_df$X11
HA = as.numeric(HA)
HA = as.vector(HA)
rel_df_HA = rel_df[order(HA),]
rel_df_HA = complete.cases(real_df_HA[, X11])
rel_df_HA = complete.cases(rel_df_HA[, X11])
rel_df_HA = complete.cases(rel_df_HA[,HA])
rel_df_HA = complete.cases(rel_df_HA[,rel_df_HA$X11])
rel_df_HA = rel_df_HA[!is.na(rel_df_HA$X11), ]
View(rel_df_HA)
HA
rel_df_HA = as.numeric(as.character(rel_df_HA$X11))
rel_df = select_df("NM")
HA = rel_df$X11
HA = as.numeric(HA)
HA = as.vector(HA)
rel_df_HA = rel_df[order(HA),]
View(rel_df_HA)
for(i in 1:length(rel_df_HA)){
if(rel_df_HA$X11[i] == "Not Available"){
rel_df_HA = rel_df_HA[-i,]
}
}
for(i in 1:length(rel_df_HA)){
if(rel_df_HA$X11[i] = "Not Available"){
rel_df_HA = rel_df_HA[-i,]
}
}
for(i in 1:length(rel_df_HA)){
if(rel_df_HA$X11[i] == "Not Available"){
rel_df_HA = rel_df_HA[-i,]
}
}
for(i in 1:length(rel_df_HA)){
if(rel_df_HA$X11[i] == "Not Available"){
rel_df_HA = rel_df_HA[-i,]
}
}
for(i in 1:length(rel_df_HA)){
if(rel_df_HA$X11[i] = "Not Available"){
rel_df_HA = rel_df_HA[-i,]
}
}
for(i in 1:length(rel_df_HA)){
if(rel_df_HA$X11[i] == Not Available){
rel_df_HA = rel_df_HA[-i,]
}
}
rel_df = select_df("NM")
HA = rel_df$X11
HA = as.numeric(HA)
HA = as.vector(HA)
rel_df_HA = rel_df[order(HA),]
for(i in 1:length(HA)){
if(HA[i] == "Not Available"){
rel_df_HA = rel_df_HA[-i,]
}
}
HA = as.vector(HA)
rel_df_HA = rel_df[order(HA),]
for(i in 1:length(HA)){
if(as.character(HA[i]) == "Not Available"){
rel_df_HA = rel_df_HA[-i,]
}
}
boolean = HA[1] == "Not Available"
boolean
boolean = HA[14] == "Not Available"
boolean
boolean = HA[3] == "Not Available"
boolean
boolean = as.character(HA[3]) == "Not Available"
boolen
boolean
as.character(HA[3]) == "Not Available"
HA[3]
HA1 = rel_df$X11
HA1 = as.vector(HA1)
HA1[3]
>   rel_df_HA = rel_df[order(HA),]
>  for(i in 1:length(HA1)){
+      if(as.character(HA1[i]) == "Not Available"){
+          rel_df_HA = rel_df_HA[-i,]
+      }
+  }
rel_df = select_df(state)
rel_df = select_df("NM")
HA = rel_df$X11
HA = as.numeric(HA)
HA = as.vector(HA)
rel_df[rel_df == "Not Available"] = NA
rel_df = rel_df[order(HA),]
for(i in 1:length(rel_df)){
if(rel_df$X11[i] == NA){
rel_df = rel_df[-i,]
}
}
rel_df = rel_df[order(HA),]
for(i in 1:length(rel_df)){
if(is.na(rel_df$X11[i]){
rel_df = rel_df[-i,]
}
}
for(i in 1:length(rel_df)){
if(is.na(rel_df$X11[i])){
rel_df = rel_df[-i,]
}
}
rel_df = select_df(state)
rel_df = select_df("NM")
HA = rel_df$X11
HA = as.numeric(HA)
HA = as.vector(HA)
rel_df_HA = rel_df[order(HA),]
rel_df_HA[rel_df_HA == "Not Available"] = NA
for(i in 1:length(rel_df_HA)){
if(is.na(rel_df$X11[i])){
rel_df = rel_df[-i,]
}
}
View(rel_df_HA)
for(i in 1:length(rel_df_HA)){
if(is.na(rel_df$X11[i])){
rel_df[i,] = rel_df[-i,]
}
}
for(i in 1:length(rel_df_HA)){
if(is.na(rel_df_HA$X11[i])){
rel_df_HA[-i,]
}
rel_df_HA
}
rel_df = select_df("NM")
HA = rel_df$X11
HA = as.numeric(HA)
HA = as.vector(HA)
rel_df = rel_df[order(HA),]
View(rel_df)
rel_df[rel_df == "Not Available"] = NA
for(i in 1:length(rel_df)){
if(rel_df$X11[i] == "NA"){
rel_df = rel_df[-i,]
}
}
for(i in 1:length(rel_df)){
check = rel_df$X11[i]
if(check == "NA"){
rel_df = rel_df[-i,]
}
}
rel_df$X11[3]
rel_df$X11[18]
for(i in 1:length(rel_df)){
check = rel_df$X11[i]
if(is.na(check)){
rel_df = rel_df[-i,]
}
}
length(rel_df)
for(i in 1:nrow(rel_df){
check = rel_df$X11[i]
if(is.na(check)){
rel_df = rel_df[-i,]
}
}
for(i in 1:nrow(rel_df)){
check = rel_df$X11[i]
}
for(i in 1:nrow(rel_df)){
check = rel_df$X11[i]
if(is.na(check)){
rel_df = rel_df[-i,]
}
}
rel_df = select_df("NM")
HA = rel_df$X11
HA = as.numeric(HA)
HA = as.vector(HA)
rel_df = rel_df[order(HA),]
View(rel_df)
rel_df[rel_df == "Not Available"] = NA
len = nrow(rel_df)
for(i in 1:len){
check = rel_df$X11[i]
if(is.na(check)){
rel_df = rel_df[-i,]
}
}
View(rel_df)
length(rel_df)
rel_df$X11[20]
is.na(rel_df$X11[20])
rel_df = rel_df[-46,]
length(rel_df)
rel_df = rel_df[-c(46),]
View(rel_df)
rel_df = rel_df[!is.na(rel_df$X11)]
rel_df = rel_df[!is.na(rel_df$X11),]
rel_df = select_df("NM")
View(rel_df)
HA = rel_df$X11
HA = as.vector(HA)
rel_df = rel_df[order(HA),]
rel_df[rel_df == "Not Available"] = NA
rel_df = select_df("NM")
View(rel_df)
length(rel_df)
rel_df = rel_df[order(HA),]
rel_df[rel_df == "Not Available"] = NA
length(rel_df)
rel_df_HA = rel_df[!is.na(rel_df$X11),]
View(rel_df_HA)
View(rel_df_HA)
length(rel_df_HA)
nrow(rel_df_HA)
rel_df_HA$X2[1]
count = 13
rel_df_HA$X2[count]
select_df = function(state){
rel_df = data.frame(matrix(nrow = 0, ncol = 46))
for(i in 1:length(state_list)){
if(state == state_list[i]){
rel_df[nrow(rel_df)+1,] = data[i,]
}
}
rel_df
}
valid_state = function(state){
count_state = 0
for(i in 1:length(state_list)){
if(state == state_list[i]){
count_state = count_state + 1
}
}
count_state
}
valid_outcome = function(outcome){
acceptable_outcomes = c("heart attack","heart failure", "pneumonia")
count_outcome = 0
for(i in 1:length(acceptable_outcomes)){
if(outcome == acceptable_outcomes[i]){
count_outcome = count_outcome + 1
}
}
count_outcome
}
rankhospital = function(state, outcome, num = "best"){
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
state_list = data[,7]
acceptable_outcomes = c("heart attack","heart failure", "pneumonia")
count_state = valid_state(state)
if(count_state == 0){
stop("invalid state")
}
count_outcome = valid_outcome(outcome)
if(count_outcome == 0){
stop("invalid outcome")
}
## Return hospital name in that state with the given rank 30-day death rate
rel_df = select_df(state)
names = rel_df$X2
HA = rel_df$X11
HA = as.vector(HA)
rel_df_HA = rel_df[order(HA),]
rel_df_HA[rel_df_HA == "Not Available"] = NA
rel_df_HA = rel_df_HA[!is.na(rel_df_HA$X11),]
HF = rel_df$X17
HF = as.vector(HF)
rel_df_HF = rel_df[order(HF),]
rel_df_HF[rel_df_HF == "Not Available"] = NA
rel_df_HF = rel_df_HF[!is.na(rel_df_HF$X17),]
Pneumo = rel_df$X23
Pneumo = as.vector(Pneumo)
rel_df_Pneumo = rel_df[order(Pneumo),]
rel_df_Pneumo[rel_df_Pneumo == "Not Available"] = NA
rel_df_Pneumo = rel_df_Pneumo[!is.na(rel_df_Pneumo$X23),]
if(num > length(names)){
return(NA)
}
if(outcome == "heart attack" && num == "best"){
return(rel_df_HA$X2[1])
}
if(outcome == "heart attack" && num == "worst"){
count = nrow(rel_df_HA)
return(rel_df_HA$X2[count])
}
if(outcome == "heart attack"){
return(rel_df_HA$X2[num])
}
if(outcome == "heart failure" && num == "best"){
return(rel_df_HF$X2[1])
}
if(outcome == "heart failure" && num == "worst"){
count = nrow(rel_df_HF)
return(rel_df_HF$X2[count])
}
if(outcome == "heart failure"){
return(rel_df_HF$X2[num])
}
if(outcome == "pneumonia" && num == "best"){
return(rel_df_Pneumo$X2[1])
}
if(outcome == "pneumonia" && num == "worst"){
count = nrow(rel_df_Pneumo)
return(rel_df_Pneumo$X2[count])
}
if(outcome == "pneumonia"){
return(rel_df_Pneumo$X2[num])
}
rankhospital("TX", "heart failure", 4)
rankhospital = function(state, outcome, num = "best"){
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
state_list = data[,7]
acceptable_outcomes = c("heart attack","heart failure", "pneumonia")
count_state = valid_state(state)
if(count_state == 0){
stop("invalid state")
}
count_outcome = valid_outcome(outcome)
if(count_outcome == 0){
stop("invalid outcome")
}
## Return hospital name in that state with the given rank 30-day death rate
rel_df = select_df(state)
names = rel_df$X2
HA = rel_df$X11
HA = as.vector(HA)
rel_df_HA = rel_df[order(HA),]
rel_df_HA[rel_df_HA == "Not Available"] = NA
rel_df_HA = rel_df_HA[!is.na(rel_df_HA$X11),]
HF = rel_df$X17
HF = as.vector(HF)
rel_df_HF = rel_df[order(HF),]
rel_df_HF[rel_df_HF == "Not Available"] = NA
rel_df_HF = rel_df_HF[!is.na(rel_df_HF$X17),]
Pneumo = rel_df$X23
Pneumo = as.vector(Pneumo)
rel_df_Pneumo = rel_df[order(Pneumo),]
rel_df_Pneumo[rel_df_Pneumo == "Not Available"] = NA
rel_df_Pneumo = rel_df_Pneumo[!is.na(rel_df_Pneumo$X23),]
if(num > length(names)){
return(NA)
}
if(outcome == "heart attack" && num == "best"){
return(rel_df_HA$X2[1])
}
if(outcome == "heart attack" && num == "worst"){
count = nrow(rel_df_HA)
return(rel_df_HA$X2[count])
}
if(outcome == "heart attack"){
return(rel_df_HA$X2[num])
}
if(outcome == "heart failure" && num == "best"){
return(rel_df_HF$X2[1])
}
if(outcome == "heart failure" && num == "worst"){
count = nrow(rel_df_HF)
return(rel_df_HF$X2[count])
}
if(outcome == "heart failure"){
return(rel_df_HF$X2[num])
}
if(outcome == "pneumonia" && num == "best"){
return(rel_df_Pneumo$X2[1])
}
if(outcome == "pneumonia" && num == "worst"){
count = nrow(rel_df_Pneumo)
return(rel_df_Pneumo$X2[count])
}
if(outcome == "pneumonia"){
return(rel_df_Pneumo$X2[num])
}
}
rankhospital = function(state, outcome, num = "best"){
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
state_list = data[,7]
acceptable_outcomes = c("heart attack","heart failure", "pneumonia")
count_state = valid_state(state)
if(count_state == 0){
stop("invalid state")
}
count_outcome = valid_outcome(outcome)
if(count_outcome == 0){
stop("invalid outcome")
}
## Return hospital name in that state with the given rank 30-day death rate
rel_df = select_df(state)
names = rel_df$X2
HA = rel_df$X11
HA = as.vector(HA)
rel_df_HA = rel_df[order(HA),]
rel_df_HA[rel_df_HA == "Not Available"] = NA
rel_df_HA = rel_df_HA[!is.na(rel_df_HA$X11),]
HF = rel_df$X17
HF = as.vector(HF)
rel_df_HF = rel_df[order(HF),]
rel_df_HF[rel_df_HF == "Not Available"] = NA
rel_df_HF = rel_df_HF[!is.na(rel_df_HF$X17),]
Pneumo = rel_df$X23
Pneumo = as.vector(Pneumo)
rel_df_Pneumo = rel_df[order(Pneumo),]
rel_df_Pneumo[rel_df_Pneumo == "Not Available"] = NA
rel_df_Pneumo = rel_df_Pneumo[!is.na(rel_df_Pneumo$X23),]
if(num > length(names)){
return(NA)
}
if(outcome == "heart attack" && num == "best"){
return(rel_df_HA$X2[1])
}
if(outcome == "heart attack" && num == "worst"){
count = nrow(rel_df_HA)
return(rel_df_HA$X2[count])
}
if(outcome == "heart attack"){
return(rel_df_HA$X2[num])
}
if(outcome == "heart failure" && num == "best"){
return(rel_df_HF$X2[1])
}
if(outcome == "heart failure" && num == "worst"){
count = nrow(rel_df_HF)
return(rel_df_HF$X2[count])
}
if(outcome == "heart failure"){
return(rel_df_HF$X2[num])
}
if(outcome == "pneumonia" && num == "best"){
return(rel_df_Pneumo$X2[1])
}
if(outcome == "pneumonia" && num == "worst"){
count = nrow(rel_df_Pneumo)
return(rel_df_Pneumo$X2[count])
}
if(outcome == "pneumonia"){
return(rel_df_Pneumo$X2[num])
}
}
rankhospital("TX", "heart failure", 4)
print(x)
stop
stop()
return(x)
source('~/Desktop/specdata/Assignment3/best.R')
